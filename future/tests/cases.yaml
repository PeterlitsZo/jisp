case_groups:
- name: simple number
  cases:
  - ['-1', '-1']
  - ['0', '0']
  - ['1', '1']
  - ['2', '2']
  - ['500', '500']
- name: simple add and sub
  cases:
  - ['(+ -1 1)', '0']
  - ['(+ 1 1)', '2']
  - ['(+ 1 2)', '3']
  - ['(+ 100 250)', '350']
  - ['(+ 1 2 3 4 5)', '15']
  - ['(- 100 1)', '99']
- name: complex add and sub
  cases:
  - ['(+)', '0']
  - ['(+ 1)', '1']
  - ['(- 1)', '-1']
  - ['(+ (+ 1 2) (+ 3 4 5))', '15']
  - ['(+ 1 1 (- 4 2))', '4']
  - ['(+ 5 (- 5 2 3) (- 13 13))', '5']
- name: times and div, rem
  cases:
  - ['(*)', '1']
  - ['(* 5)', '5']
  - ['(/ 1)', '1']
  - ['(* 4 5 6)', '120']
  - ['(/ 12 4)', '3']
  - ['(% 15 4)', '3']
  - ['(+ (/ 12 4) (* 4 5))', '23']
- name: compare
  cases:
  - ['(== (/ 12 4) (+ 1 2))', 'true']
  - ['(!= (/ 12 4) (+ 1 2))', 'false']
  - ['(< 1 3)', 'true']
  - ['(<= 1 3)', 'true']
  - ['(<= 4 3)', 'false']
  - ['(> 4 3)', 'true']
  - ['(>= 4 3)', 'true']
  - ['(> 3 3)', 'false']
  - ['(>= 3 3)', 'true']
  - ['(== true true)', 'true']
  - ['(== true false)', 'false']
  - ['(!= true false)', 'true']
  - ['(!= false false)', 'false']
- name: syntax error
  cases:
  - code: '(+ 1 1'
    wanted_error: |
      0001 | (+ 1 1
           |       ^ Syntax: Invalid syntax, maybe forgot ')'.
- name: float
  cases:
  - ['5.0', '5.0']
  - ['(/ 1 2)', '0.5']
  - ['(/ 3 2)', '1.5']
  - ['(* (/ 3 2) 2)', '3.0']
  - ['(+ 0.1 0.2)', '0.30000000000000004'] # YES!
- name: variable
  cases:
  - ['(let a 13) (let b 12) (+ a b)', '25']
  - ['(let a (+ 4 5)) (let b (/ 21 7)) (- a b)', '6']
- name: if statement
  cases:
  - ['(if (== 2 1) 1 (* 2 1))', '2']
  - ['(let n 5) (if (== n 1) 1 (* n (- n 1)))', '20']
- name: string
  cases:
  - ['"hello world"', '"hello world"']
  - ['(let h "hello") (let w "world") (if (== 1 1) h w)', '"hello"']
- name: function
  cases:
  - ['(fn ret5 [] 5) (ret5)', '5']
  - ['(fn bar [] 3) (fn foo [] (+ (bar) 5)) (+ (bar) (foo))', '11']
  - ['(fn add [x y] (+ a b)) (add 3 5)', '8']
  - ['(fn fac [x] (if (== x 0) 1 (* (fac (- x 1)) x))) (fac 5)', '120']
- name: extend function
  cases:
  - code: '(x_fac 5)'
    extend: |
      register_xfn("x_fac", |args: Vec<Value>| {
          fn fac(n: i64) -> i64 {
              if n == 0 { 1 } else { fac(n - 1) * n }
          }
          assert!(args.len() == 1);
          match args[0] {
              Value::Int(val) => Value::Int(fac(val)),
              _ => panic!("unexpected value"),
          }
      })
    wanted_result: '120'
- name: do statement
  cases:
  - ['(do (+ 10 10) 5)', '5']
  - code: |
      (fn foo [] 5)
      (fn repeat [times f]
        (if (!= times 0)
          (do
            (let a (f))
            (let b (repeat (- times 1) f))
            (+ a b))
          0))
      (repeat 10 foo)
    wanted_result: '50'